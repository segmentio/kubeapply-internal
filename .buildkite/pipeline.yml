env:
  SEGMENT_BUILDKITE_IMAGE: "buildkite-agent-golang1.23"
  GOPRIVATE: "github.com/segmentio"
  GOFLAGS: "-mod=vendor"
  SEGMENT_CONTEXTS: "aws-credentials,ecr,snyk"
  # GOPATH and PATH are intentionally not set globally to rely on the agent image's defaults,
  # reducing potential conflicts with agent bootstrap scripts.
  # PATH will be augmented in specific steps as needed.

steps:
  - label: ":wrench: Setup Dependencies"
    key: setup_dependencies
    agents:
      queue: v1
    commands:
      - echo "--- Setting up directories"
      - mkdir -p deps "${HOME}/local/bin" "${HOME}/go/bin"
      - echo "Initial PATH: $PATH"
      - echo "Initial GOPATH: $GOPATH"
      - echo "Initial GOBIN: $GOBIN"
      - echo "--- Fetching external tools (helm, kubectl, etc.) with pull-deps.sh"
      - cd deps && ../scripts/pull-deps.sh && cd -
      - echo "--- Installing Go tools (go-bindata, stringer)"
      - export GOBIN_DIR="${HOME}/go/bin"
      - export LOCAL_BIN_DIR="${HOME}/local/bin"
      - export PATH="$GOBIN_DIR:$LOCAL_BIN_DIR:$PATH" # Set PATH for this step's go install and make
      - export GOBIN="$GOBIN_DIR" # Ensure go install uses this path
      - make go-bindata # Installs go-bindata, should respect GOBIN or install to $GOPATH/bin
      - go install golang.org/x/tools/cmd/stringer@v0.12.0 # Installs stringer to $GOBIN or $GOPATH/bin
      - echo "--- Verifying tools installation (PATH for this step: $PATH)"
      - which go-bindata && go-bindata -version || { echo "go-bindata not found or not working in setup step"; exit 1; }
      - which stringer || { echo "stringer not found in setup step"; exit 1; }
      - which helm && helm version || { echo "helm (from pull-deps.sh) not found or not working in setup step"; exit 1; }
      - ls -al "$LOCAL_BIN_DIR" # Show contents of where pull-deps.sh installs
      - ls -al "$GOBIN_DIR" # Show contents of where go install should place binaries

  - label: ":golangci-lint: Lint"
    key: lint
    agents:
      queue: v1
    depends_on: setup_dependencies
    commands:
      - echo "--- Running Lint (PATH: $PATH)"
      # golangci-lint should be available in the base image's PATH
      - golangci-lint run ./...

  - label: ":golang::test_tube::coverage: Test"
    key: test
    agents:
      queue: v1
    depends_on:
      - setup_dependencies
      - lint
    commands:
      - echo "--- Running Tests"
      # Prepend GOBIN and LOCAL_BIN_DIR to PATH for make commands
      - export PATH="${HOME}/go/bin:${HOME}/local/bin:$PATH"
      - make test-ci

  - label: ":clippy: Build"
    key: build
    agents:
      queue: v1
    depends_on:
      - setup_dependencies
      - lint
    commands:
      - echo "--- Building Artifacts"
      # Prepend GOBIN and LOCAL_BIN_DIR to PATH for make commands
      - export PATH="${HOME}/go/bin:${HOME}/local/bin:$PATH"
      - make kubeapply
      - make lambda-zip
      - make build-lambda-image

  - group: ":ecr: Publish Lambda"
    if: 'build.branch == "main"'
    steps:
      - label: ":ecr: Publish Lambda Image"
        agents:
          queue: v1
        key: publish-lambda
        depends_on: build # Depends on the build step completing successfully
        env:
          # Override SEGMENT_CONTEXTS for this step if needed, or rely on top-level
          SEGMENT_CONTEXTS: "ecr"
        commands:
          - make publish-lambda-image

      - label: ":terraform: Notify for Environment Updates"
        agents:
          queue: v1
        depends_on: publish-lambda
        commands: |
          echo "--- :terraform: New kubeapply-lambda image available"
          echo "Image tag '${VERSION_REF}' has been published to all regions."
          echo ""
          echo "To deploy to staging:"
          echo "1. Update lambda_image_tag in staging Terraform:"
          echo "   terraform workspaces/staging/*/config.tf"
          echo ""
          echo "2. After staging validation, update production:"
          echo "   terraform workspaces/production/*/config.tf"
