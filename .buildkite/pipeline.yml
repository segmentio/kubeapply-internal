env:
  SEGMENT_BUILDKITE_IMAGE: "buildkite-agent-golang1.23"
  GOPRIVATE: "github.com/segmentio"
  GOFLAGS: "-mod=vendor" # Project-specific Go flags
  SEGMENT_CONTEXTS: "aws-credentials,ecr,snyk" # Default Segment contexts
  # No global GOPATH or PATH overrides here to rely on image defaults initially

steps:
  # - label: ":wrench: Setup Dependencies & Generate Data"
  #   key: setup_dependencies
  #   agents:
  #     queue: v1
  #   commands:
  #     # This single make target is responsible for all dependency setup and data generation.
  #     # It must ensure tools are installed to known locations ($HOME/go/bin, $HOME/local/bin).
  #     - make setup_all_ci_dependencies
  #     # Optional: Verify critical tools after make, using the image's default PATH initially
  #     # and then with augmented PATH to confirm make put things in expected places.
  #     - echo "--- Verifying tools post-make (default PATH: $PATH) ---"
  #     - which golangci-lint || echo "golangci-lint not in default PATH"
  #     - export CI_TOOLS_PATH="${HOME}/go/bin:${HOME}/local/bin"
  #     - echo "--- Verifying tools post-make (augmented PATH: $CI_TOOLS_PATH:$PATH) ---"
  #     - PATH="$CI_TOOLS_PATH:$PATH" which go-bindata && PATH="$CI_TOOLS_PATH:$PATH" go-bindata -version || { echo "go-bindata verification failed"; exit 1; }
  #     - PATH="$CI_TOOLS_PATH:$PATH" which stringer || { echo "stringer verification failed"; exit 1; }
  #     - PATH="$CI_TOOLS_PATH:$PATH" which helm && PATH="$CI_TOOLS_PATH:$PATH" helm version || { echo "helm verification failed"; exit 1; }



  # - label: ":golang::test_tube::coverage: Test"
  #   key: test
  #   agents:
  #     queue: v1
  #   depends_on:
  #     - setup_dependencies
  #     - lint
  #   commands:
  #     - echo "--- Running Tests ---"
  #     # Prepend paths for tools installed by 'make setup_all_ci_dependencies'
  #     - export PATH="${HOME}/go/bin:${HOME}/local/bin:$PATH"
  #     - make test-ci

  - label: ":clippy: Build Kubeapply & Lambda"
    key: build
    agents:
      queue: v1
    commands:
      - export PATH=$PATH:/go/bin:/var/lib/buildkite-agent/go/bin:/go/src/github.com/segmentio/kubeapply/deps:$HOME/local/bin
      - make kubeapply
      - make lambda-zip
      - make build-lambda-image


  # - label: 'Publish'
  #   env:
  #     SEGMENT_CONTEXTS: "aws-credentials,ecr"
  #     SEGMENT_BUILDKITE_IMAGE: 'buildkite-agent-golang1.19:latest'
  #   agents:
  #     queue: v1
  #   commands: |
  #     export PATH=$PATH:/go/bin:/var/lib/buildkite-agent/go/bin:/go/src/github.com/segmentio/kubeapply/deps:$HOME/local/bin
  #     make publish


  - group: ":ecr: Publish Lambda"
    if: 'build.branch == "main"'
    steps:
      - label: ":ecr: Publish Lambda Image"
        agents:
          queue: v1
        key: publish-lambda
        depends_on: build
        env:
          SEGMENT_CONTEXTS: "aws-credentials,ecr"
        commands:
          # Prepend paths for tools if make publish-lambda-image needs them
          - export PATH="${HOME}/go/bin:${HOME}/local/bin:$PATH"
          - make publish-lambda-image

      - label: ":terraform: Notify for Environment Updates"
        agents:
          queue: v1
        depends_on: publish-lambda
        commands: |
          echo "--- :terraform: New kubeapply-lambda image available"
          echo "Image tag '${VERSION_REF}' has been published to all regions."
          echo ""
          echo "To deploy to staging:"
          echo "1. Update lambda_image_tag in staging Terraform:"
          echo "   terraform workspaces/staging/*/config.tf"
          echo ""
          echo "2. After staging validation, update production:"
          echo "   terraform workspaces/production/*/config.tf"
