env:
  SEGMENT_BUILDKITE_IMAGE: "buildkite-agent-golang1.23"
  GOPRIVATE: "github.com/segmentio"
  GOFLAGS: "-mod=vendor"
  SEGMENT_CONTEXTS: "aws-credentials,ecr,snyk"

steps:
  - label: ":golangci-lint: Lint"
    key: lint
    agents:
      queue: v1
    commands:
      - cd deps && ../scripts/pull-deps.sh && cd -
      - echo "--- Installing go tools"
      - GOFLAGS="" go install golang.org/x/tools/cmd/stringer@v0.12.0
      - GOFLAGS="" go install github.com/kevinburke/go-bindata/v4/go-bindata@latest
      - echo "--- Verifying PATH and dependencies"
      - echo "PATH=$PATH"
      - echo "GOPATH=$GOPATH"
      - echo "HOME=$HOME"
      - ls -al "${HOME}/local/bin"
      - echo "--- Verifying required binaries"
      - which -a helm
      - helm version || { echo "Helm not found or not working"; exit 1; }
      - which -a go-bindata
      - go-bindata -version || { echo "go-bindata not found or not working"; exit 1; }
      - which -a stringer || { echo "stringer not found or not working"; exit 1; }

  - label: ":golang::test_tube::coverage: Test"
    key: test
    agents:
      queue: v1
    depends_on: lint
    commands:
      - mkdir -p deps
      - cd deps && ../scripts/pull-deps.sh && cd -
      - make test-ci

  - label: ":clippy: Build"
    key: build
    agents:
      queue: v1
    depends_on: lint
    commands:
      - mkdir -p deps
      - cd deps && ../scripts/pull-deps.sh && cd -
      - make kubeapply
      - make lambda-zip
      - make build-lambda-image

  - group: ":ecr: Publish Lambda"
    if: 'build.branch == "main"'
    steps:
      - label: ":ecr: Publish Lambda Image"
        agents:
          queue: v1
        key: publish-lambda
        depends_on: build
        env:
          SEGMENT_CONTEXTS: "ecr"
        commands:
          - make publish-lambda-image

      - label: ":terraform: Notify for Environment Updates"
        agents:
          queue: v1
        depends_on: publish-lambda
        commands: |
          echo "--- :terraform: New kubeapply-lambda image available"
          echo "Image tag '${VERSION_REF}' has been published to all regions."
          echo ""
          echo "To deploy to staging:"
          echo "1. Update lambda_image_tag in staging Terraform:"
          echo "   terraform workspaces/staging/*/config.tf"
          echo ""
          echo "2. After staging validation, update production:"
          echo "   terraform workspaces/production/*/config.tf"
